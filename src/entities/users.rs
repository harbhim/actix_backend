//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use chrono::Utc;
use sea_orm::{entity::prelude::*, IntoActiveModel, NotSet, Set};
use sea_orm_migration::prelude::*;
use serde::{Deserialize, Serialize};

use super::helpers::pass_hash;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: Uuid,
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    #[sea_orm(unique)]
    pub email: String,
    #[serde(skip_serializing)]
    pub password: String,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

// Create Model
#[derive(Debug, Serialize, Deserialize)]
pub struct InsertModel {
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    pub email: String,
    pub password: String,
}

impl From<InsertModel> for ActiveModel {
    fn from(model: InsertModel) -> Self {
        let hash = pass_hash(model.password.as_bytes());
        ActiveModel {
            first_name: Set(model.first_name),
            last_name: Set(model.last_name),
            email: Set(model.email),
            password: Set(hash),
            ..Default::default()
        }
    }
}

impl IntoActiveModel<ActiveModel> for InsertModel {
    fn into_active_model(self) -> ActiveModel {
        let hash = pass_hash(self.password.as_bytes());
        ActiveModel {
            first_name: Set(self.first_name),
            last_name: Set(self.last_name),
            email: Set(self.email),
            password: Set(hash),
            ..Default::default()
        }
    }
}

// Update Model
#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateModel {
    pub first_name: Option<String>,
    pub last_name: Option<String>,
}

impl From<UpdateModel> for ActiveModel {
    fn from(model: UpdateModel) -> Self {
        let utc_now = Utc::now();
        let fixed_offset = chrono::FixedOffset::east_opt(5 * 3600 + 30 * 60).unwrap();
        let now_with_offset = utc_now.with_timezone(&fixed_offset);
        ActiveModel {
            first_name: Set(model.first_name),
            last_name: Set(model.last_name),
            email: NotSet,
            created_at: NotSet,
            updated_at: Set(Some(now_with_offset)),
            ..Default::default()
        }
    }
}

impl IntoActiveModel<ActiveModel> for UpdateModel {
    fn into_active_model(self) -> ActiveModel {
        let utc_now = Utc::now();
        let fixed_offset = chrono::FixedOffset::east_opt(5 * 3600 + 30 * 60).unwrap();
        let now_with_offset = utc_now.with_timezone(&fixed_offset);
        ActiveModel {
            first_name: Set(self.first_name),
            last_name: Set(self.last_name),
            email: NotSet,
            created_at: NotSet,
            updated_at: Set(Some(now_with_offset)),
            ..Default::default()
        }
    }
}
